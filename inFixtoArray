#include <iostream>
#include <vector>
#include <string>
using namespace std;

bool isOperator(char ch){
    return (ch == '+' || ch == '-' || ch == '*' || ch == '/');
}

bool isParenthesis(char ch){
    return (ch == '(' || ch == ')');
}

bool isOperand(char ch){
    return (ch >= '0' && ch <= '9');

}
bool isNegative(char ch){
    return (ch == '-');
}
vector<string> convertToInfixArray(const string& expression){
    vector<string> infixArray;
    string token;

    for (size_t i = 0; i < expression.length(); i++){
        char ch = expression[i];

        // Skip whitespace
        if (ch == ' ')
            continue;

        // If the character is a digit or the start of a negative number
        if (isOperand(ch) || (isNegative(ch) && (i == 0 || expression[i-1] == '(' || isOperator(expression[i-1])))){
            token += ch;
            while (i + 1 < expression.length() && expression[i + 1] >= '0' && expression[i + 1] <= '9') {
                i++;
                token += expression[i];
            }
            infixArray.push_back(token);
            token = "";
        }
        // If the character is an operator
        else if (isOperator(ch)){
            infixArray.push_back(string(1, ch));
        }
        // If the character is an opening parenthesis
        else if (ch == '('){
            infixArray.push_back(string(1, ch));
        }
        // If the character is a closing parenthesis
        else if (ch == ')'){
            infixArray.push_back(string(1, ch));
        }
        
    }
    return infixArray;
}

int main() {
    string expression;
    cout << "Enter an arithmetic expression: ";
    getline(cin, expression);

    vector<string> infixArray = convertToInfixArray(expression);
    cout << "Infix array:" << endl;
    for (const auto& element : infixArray) {
        cout << element << " " << endl;
    }
    return 0;
}
