#include <iostream>
#include <vector>
#include <string>
using namespace std;

vector<string> convertToInfixArray(const string& expression) {
    vector<string> infixArray;
    string currentElement;

    for (size_t i = 0; i < expression.length(); i++) {
        char ch = expression[i];

        // Skip whitespace
        if (ch == ' ')
            continue;

        // If the character is a digit or the start of a negative number
        if ((ch >= '0' && ch <= '9') || (ch == '-' && (i == 0 || expression[i - 1] == '(' || expression[i - 1] == '+' || expression[i - 1] == '-' || expression[i - 1] == '*' || expression[i - 1] == '/'))) {
            currentElement += ch;
            while (i + 1 < expression.length() && expression[i + 1] >= '0' && expression[i + 1] <= '9') {
                i++;
                currentElement += expression[i];
            }
            infixArray.push_back(currentElement);
            currentElement = "";
        }
        // If the character is an operator
        else if (ch == '+' || ch == '-' || ch == '*' || ch == '/') {
            infixArray.push_back(string(1, ch));
        }
        // If the character is an opening parenthesis
        else if (ch == '(') {
            infixArray.push_back(string(1, ch));
        }
        // If the character is a closing parenthesis
        else if (ch == ')') {
            infixArray.push_back(string(1, ch));
        }
    }

    return infixArray;
}
